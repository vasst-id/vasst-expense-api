// Code generated by MockGen. DO NOT EDIT.
// Source: hello_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHelloService is a mock of HelloService interface.
type MockHelloService struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceMockRecorder
}

// MockHelloServiceMockRecorder is the mock recorder for MockHelloService.
type MockHelloServiceMockRecorder struct {
	mock *MockHelloService
}

// NewMockHelloService creates a new mock instance.
func NewMockHelloService(ctrl *gomock.Controller) *MockHelloService {
	mock := &MockHelloService{ctrl: ctrl}
	mock.recorder = &MockHelloServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloService) EXPECT() *MockHelloServiceMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockHelloService) SayHello(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockHelloServiceMockRecorder) SayHello(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockHelloService)(nil).SayHello), ctx, name)
}
